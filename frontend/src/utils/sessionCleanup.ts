/**
 * Session Cleanup Utility
 * D·ªçn d·∫πp session c≈© khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
 */

import { sessionManager } from './sessionManager';

export class SessionCleanup {
  private static instance: SessionCleanup;
  private cleanupInterval: NodeJS.Timeout | null = null;
  
  private constructor() {}
  
  public static getInstance(): SessionCleanup {
    if (!SessionCleanup.instance) {
      SessionCleanup.instance = new SessionCleanup();
    }
    return SessionCleanup.instance;
  }

  /**
   * Kh·ªüi t·∫°o cleanup process
   */
  public initialize(): void {
    console.log('üßπ Initializing session cleanup...');
    
    // D·ªçn d·∫πp ngay l·∫≠p t·ª©c khi kh·ªüi ƒë·ªông
    this.performInitialCleanup();
    
    // Thi·∫øt l·∫≠p interval ƒë·ªÉ d·ªçn d·∫πp ƒë·ªãnh k·ª≥ (m·ªói 10 ph√∫t) - √≠t th∆∞·ªùng xuy√™n h∆°n
    this.cleanupInterval = setInterval(() => {
      this.performPeriodicCleanup();
    }, 10 * 60 * 1000);
    
    console.log('‚úÖ Session cleanup initialized');
  }

  /**
   * Th·ª±c hi·ªán d·ªçn d·∫πp ban ƒë·∫ßu khi kh·ªüi ƒë·ªông app
   */
  private performInitialCleanup(): void {
    try {
      const sessionInfo = sessionManager.getSessionInfo();
      
      // Ki·ªÉm tra session c√≥ h·ª£p l·ªá kh√¥ng
      if (!sessionManager.isSessionValid()) {
        console.log('üßπ Invalid session detected on startup, clearing...');
        sessionManager.clearAllSessionData();
        return;
      }
      
      // Ki·ªÉm tra session c√≥ qu√° c≈© kh√¥ng (qu√° 7 ng√†y)
      if (sessionInfo.sessionAge && sessionInfo.sessionAge > 7 * 24 * 60 * 60 * 1000) {
        console.log('üßπ Session too old on startup, clearing...');
        sessionManager.clearAllSessionData();
        return;
      }
      
      console.log('‚úÖ Initial session cleanup completed - session is valid');
    } catch (error) {
      console.error('‚ùå Error during initial session cleanup:', error);
      // N·∫øu c√≥ l·ªói, x√≥a s·∫°ch session ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n
      sessionManager.clearAllSessionData();
    }
  }

  /**
   * Th·ª±c hi·ªán d·ªçn d·∫πp ƒë·ªãnh k·ª≥
   */
  private performPeriodicCleanup(): void {
    try {
      const sessionInfo = sessionManager.getSessionInfo();
      
      // Ki·ªÉm tra token c√≥ s·∫Øp h·∫øt h·∫°n kh√¥ng (trong v√≤ng 1 gi·ªù)
      if (sessionInfo.tokenExpiry) {
        const oneHourFromNow = (Date.now() / 1000) + (60 * 60);
        if (sessionInfo.tokenExpiry < oneHourFromNow) {
          console.log('‚ö†Ô∏è Token will expire soon:', new Date(sessionInfo.tokenExpiry * 1000));
        }
      }
      
      // Ki·ªÉm tra session c√≥ qu√° c≈© kh√¥ng (qu√° 7 ng√†y)
      if (sessionInfo.sessionAge && sessionInfo.sessionAge > 7 * 24 * 60 * 60 * 1000) {
        console.log('üßπ Session too old during periodic cleanup, clearing...');
        sessionManager.clearAllSessionData();
        return;
      }
      
      console.log('‚úÖ Periodic session cleanup completed - session is valid');
    } catch (error) {
      console.error('‚ùå Error during periodic session cleanup:', error);
      // Kh√¥ng x√≥a session ngay l·∫≠p t·ª©c n·∫øu c√≥ l·ªói trong periodic cleanup
    }
  }

  /**
   * D·ª´ng cleanup process
   */
  public stop(): void {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
    
    console.log('üõë Session cleanup stopped');
  }

  /**
   * Force cleanup ngay l·∫≠p t·ª©c
   */
  public forceCleanup(): void {
    console.log('üßπ Force cleanup requested...');
    this.performInitialCleanup();
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i cleanup
   */
  public getStatus(): {
    isRunning: boolean;
    lastCleanup?: Date;
    sessionInfo: any;
  } {
    return {
      isRunning: this.cleanupInterval !== null,
      lastCleanup: new Date(),
      sessionInfo: sessionManager.getSessionInfo()
    };
  }
}

// Export singleton instance
export const sessionCleanup = SessionCleanup.getInstance();
